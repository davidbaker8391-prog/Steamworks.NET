// This file is automatically generated!

using System;
using System.Runtime.InteropServices;

namespace Steamworks {
	public static class SteamClient {
		public static int CreateSteamPipe() {
			return NativeMethods.ISteamClient_CreateSteamPipe();
		}

		public static bool BReleaseSteamPipe(int hSteamPipe) {
			return NativeMethods.ISteamClient_BReleaseSteamPipe(hSteamPipe);
		}

		public static int ConnectToGlobalUser(int hSteamPipe) {
			return NativeMethods.ISteamClient_ConnectToGlobalUser(hSteamPipe);
		}

		public static int CreateLocalUser(out int phSteamPipe, EAccountType eAccountType) {
			return NativeMethods.ISteamClient_CreateLocalUser(out phSteamPipe, eAccountType);
		}

		public static void ReleaseUser(int hSteamPipe, int hUser) {
			NativeMethods.ISteamClient_ReleaseUser(hSteamPipe, hUser);
		}

		public static IntPtr GetISteamUser(int hSteamUser, int hSteamPipe, string pchVersion) {
			return NativeMethods.ISteamClient_GetISteamUser(hSteamUser, hSteamPipe, new InteropHelp.UTF8String(pchVersion));
		}

		public static IntPtr GetISteamGameServer(int hSteamUser, int hSteamPipe, string pchVersion) {
			return NativeMethods.ISteamClient_GetISteamGameServer(hSteamUser, hSteamPipe, new InteropHelp.UTF8String(pchVersion));
		}

		public static void SetLocalIPBinding(uint unIP, ushort usPort) {
			NativeMethods.ISteamClient_SetLocalIPBinding(unIP, usPort);
		}

		public static IntPtr GetISteamFriends(int hSteamUser, int hSteamPipe, string pchVersion) {
			return NativeMethods.ISteamClient_GetISteamFriends(hSteamUser, hSteamPipe, new InteropHelp.UTF8String(pchVersion));
		}

		public static IntPtr GetISteamUtils(int hSteamPipe, string pchVersion) {
			return NativeMethods.ISteamClient_GetISteamUtils(hSteamPipe, new InteropHelp.UTF8String(pchVersion));
		}

		public static IntPtr GetISteamMatchmaking(int hSteamUser, int hSteamPipe, string pchVersion) {
			return NativeMethods.ISteamClient_GetISteamMatchmaking(hSteamUser, hSteamPipe, new InteropHelp.UTF8String(pchVersion));
		}

		public static IntPtr GetISteamMatchmakingServers(int hSteamUser, int hSteamPipe, string pchVersion) {
			return NativeMethods.ISteamClient_GetISteamMatchmakingServers(hSteamUser, hSteamPipe, new InteropHelp.UTF8String(pchVersion));
		}

		public static IntPtr GetISteamGenericInterface(int hSteamUser, int hSteamPipe, string pchVersion) {
			return NativeMethods.ISteamClient_GetISteamGenericInterface(hSteamUser, hSteamPipe, new InteropHelp.UTF8String(pchVersion));
		}

		public static IntPtr GetISteamUserStats(int hSteamUser, int hSteamPipe, string pchVersion) {
			return NativeMethods.ISteamClient_GetISteamUserStats(hSteamUser, hSteamPipe, new InteropHelp.UTF8String(pchVersion));
		}

		public static IntPtr GetISteamGameServerStats(int hSteamuser, int hSteamPipe, string pchVersion) {
			return NativeMethods.ISteamClient_GetISteamGameServerStats(hSteamuser, hSteamPipe, new InteropHelp.UTF8String(pchVersion));
		}

		public static IntPtr GetISteamApps(int hSteamUser, int hSteamPipe, string pchVersion) {
			return NativeMethods.ISteamClient_GetISteamApps(hSteamUser, hSteamPipe, new InteropHelp.UTF8String(pchVersion));
		}

		public static IntPtr GetISteamNetworking(int hSteamUser, int hSteamPipe, string pchVersion) {
			return NativeMethods.ISteamClient_GetISteamNetworking(hSteamUser, hSteamPipe, new InteropHelp.UTF8String(pchVersion));
		}

		public static IntPtr GetISteamRemoteStorage(int hSteamuser, int hSteamPipe, string pchVersion) {
			return NativeMethods.ISteamClient_GetISteamRemoteStorage(hSteamuser, hSteamPipe, new InteropHelp.UTF8String(pchVersion));
		}

		public static IntPtr GetISteamScreenshots(int hSteamuser, int hSteamPipe, string pchVersion) {
			return NativeMethods.ISteamClient_GetISteamScreenshots(hSteamuser, hSteamPipe, new InteropHelp.UTF8String(pchVersion));
		}

		public static void RunFrame() {
			NativeMethods.ISteamClient_RunFrame();
		}

		public static uint GetIPCCallCount() {
			return NativeMethods.ISteamClient_GetIPCCallCount();
		}

		public static void SetWarningMessageHook(IntPtr pFunction) {
			NativeMethods.ISteamClient_SetWarningMessageHook(pFunction);
		}

		public static bool BShutdownIfAllPipesClosed() {
			return NativeMethods.ISteamClient_BShutdownIfAllPipesClosed();
		}
#if _PS3
		public static IntPtr GetISteamPS3OverlayRender() {
			return NativeMethods.ISteamClient_GetISteamPS3OverlayRender();
		}
#endif
		public static IntPtr GetISteamHTTP(int hSteamuser, int hSteamPipe, string pchVersion) {
			return NativeMethods.ISteamClient_GetISteamHTTP(hSteamuser, hSteamPipe, new InteropHelp.UTF8String(pchVersion));
		}

		public static IntPtr GetISteamUnifiedMessages(int hSteamuser, int hSteamPipe, string pchVersion) {
			return NativeMethods.ISteamClient_GetISteamUnifiedMessages(hSteamuser, hSteamPipe, new InteropHelp.UTF8String(pchVersion));
		}

		public static IntPtr GetISteamController(int hSteamUser, int hSteamPipe, string pchVersion) {
			return NativeMethods.ISteamClient_GetISteamController(hSteamUser, hSteamPipe, new InteropHelp.UTF8String(pchVersion));
		}

		public static IntPtr GetISteamUGC(int hSteamUser, int hSteamPipe, string pchVersion) {
			return NativeMethods.ISteamClient_GetISteamUGC(hSteamUser, hSteamPipe, new InteropHelp.UTF8String(pchVersion));
		}
	}
}