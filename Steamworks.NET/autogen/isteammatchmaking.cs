// This file is automatically generated!

using System;
using System.Runtime.InteropServices;

namespace Steamworks {
	public static class SteamMatchmaking {
		public static int GetFavoriteGameCount() {
			return NativeMethods.ISteamMatchmaking_GetFavoriteGameCount();
		}

		public static bool GetFavoriteGame(int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer) {
			return NativeMethods.ISteamMatchmaking_GetFavoriteGame(iGame, out pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
		}

		public static bool RemoveFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags) {
			return NativeMethods.ISteamMatchmaking_RemoveFavoriteGame(nAppID, nIP, nConnPort, nQueryPort, unFlags);
		}

		public static ulong RequestLobbyList() {
			return NativeMethods.ISteamMatchmaking_RequestLobbyList();
		}

		public static void AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, ELobbyComparison eComparisonType) {
			NativeMethods.ISteamMatchmaking_AddRequestLobbyListStringFilter(new InteropHelp.UTF8String(pchKeyToMatch), new InteropHelp.UTF8String(pchValueToMatch), eComparisonType);
		}

		public static void AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType) {
			NativeMethods.ISteamMatchmaking_AddRequestLobbyListNumericalFilter(new InteropHelp.UTF8String(pchKeyToMatch), nValueToMatch, eComparisonType);
		}

		public static void AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo) {
			NativeMethods.ISteamMatchmaking_AddRequestLobbyListNearValueFilter(new InteropHelp.UTF8String(pchKeyToMatch), nValueToBeCloseTo);
		}

		public static void AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable) {
			NativeMethods.ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(nSlotsAvailable);
		}

		public static void AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter) {
			NativeMethods.ISteamMatchmaking_AddRequestLobbyListDistanceFilter(eLobbyDistanceFilter);
		}

		public static void AddRequestLobbyListResultCountFilter(int cMaxResults) {
			NativeMethods.ISteamMatchmaking_AddRequestLobbyListResultCountFilter(cMaxResults);
		}

		public static void AddRequestLobbyListCompatibleMembersFilter(ulong steamIDLobby) {
			NativeMethods.ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(steamIDLobby);
		}

		public static ulong GetLobbyByIndex(int iLobby) {
			return NativeMethods.ISteamMatchmaking_GetLobbyByIndex(iLobby);
		}

		public static ulong CreateLobby(ELobbyType eLobbyType, int cMaxMembers) {
			return NativeMethods.ISteamMatchmaking_CreateLobby(eLobbyType, cMaxMembers);
		}

		public static ulong JoinLobby(ulong steamIDLobby) {
			return NativeMethods.ISteamMatchmaking_JoinLobby(steamIDLobby);
		}

		public static void LeaveLobby(ulong steamIDLobby) {
			NativeMethods.ISteamMatchmaking_LeaveLobby(steamIDLobby);
		}

		public static bool InviteUserToLobby(ulong steamIDLobby, ulong steamIDInvitee) {
			return NativeMethods.ISteamMatchmaking_InviteUserToLobby(steamIDLobby, steamIDInvitee);
		}

		public static int GetNumLobbyMembers(ulong steamIDLobby) {
			return NativeMethods.ISteamMatchmaking_GetNumLobbyMembers(steamIDLobby);
		}

		public static ulong GetLobbyMemberByIndex(ulong steamIDLobby, int iMember) {
			return NativeMethods.ISteamMatchmaking_GetLobbyMemberByIndex(steamIDLobby, iMember);
		}

		public static string GetLobbyData(ulong steamIDLobby, string pchKey) {
			return InteropHelp.PtrToStringUTF8(NativeMethods.ISteamMatchmaking_GetLobbyData(steamIDLobby, new InteropHelp.UTF8String(pchKey)));
		}

		public static bool SetLobbyData(ulong steamIDLobby, string pchKey, string pchValue) {
			return NativeMethods.ISteamMatchmaking_SetLobbyData(steamIDLobby, new InteropHelp.UTF8String(pchKey), new InteropHelp.UTF8String(pchValue));
		}

		public static int GetLobbyDataCount(ulong steamIDLobby) {
			return NativeMethods.ISteamMatchmaking_GetLobbyDataCount(steamIDLobby);
		}

		public static bool GetLobbyDataByIndex(ulong steamIDLobby, int iLobbyData, out string pchKey, int cchKeyBufferSize, out string pchValue, int cchValueBufferSize) {
			IntPtr pchKey2 = Marshal.AllocHGlobal(cchKeyBufferSize);
			IntPtr pchValue2 = Marshal.AllocHGlobal(cchValueBufferSize);
			bool ret = NativeMethods.ISteamMatchmaking_GetLobbyDataByIndex(steamIDLobby, iLobbyData, pchKey2, cchKeyBufferSize, pchValue2, cchValueBufferSize);
			pchKey = ret ? InteropHelp.PtrToStringUTF8(pchKey2) : null;
			pchValue = ret ? InteropHelp.PtrToStringUTF8(pchValue2) : null;
			Marshal.FreeHGlobal(pchKey2);
			Marshal.FreeHGlobal(pchValue2);
			return ret;
		}

		public static bool DeleteLobbyData(ulong steamIDLobby, string pchKey) {
			return NativeMethods.ISteamMatchmaking_DeleteLobbyData(steamIDLobby, new InteropHelp.UTF8String(pchKey));
		}

		public static string GetLobbyMemberData(ulong steamIDLobby, ulong steamIDUser, string pchKey) {
			return InteropHelp.PtrToStringUTF8(NativeMethods.ISteamMatchmaking_GetLobbyMemberData(steamIDLobby, steamIDUser, new InteropHelp.UTF8String(pchKey)));
		}

		public static void SetLobbyMemberData(ulong steamIDLobby, string pchKey, string pchValue) {
			NativeMethods.ISteamMatchmaking_SetLobbyMemberData(steamIDLobby, new InteropHelp.UTF8String(pchKey), new InteropHelp.UTF8String(pchValue));
		}

		public static bool SendLobbyChatMsg(ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody) {
			return NativeMethods.ISteamMatchmaking_SendLobbyChatMsg(steamIDLobby, pvMsgBody, cubMsgBody);
		}

		public static int GetLobbyChatEntry(ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out EChatEntryType peChatEntryType) {
			return NativeMethods.ISteamMatchmaking_GetLobbyChatEntry(steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
		}

		public static bool RequestLobbyData(ulong steamIDLobby) {
			return NativeMethods.ISteamMatchmaking_RequestLobbyData(steamIDLobby);
		}

		public static void SetLobbyGameServer(ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer) {
			NativeMethods.ISteamMatchmaking_SetLobbyGameServer(steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
		}

		public static bool GetLobbyGameServer(ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer) {
			return NativeMethods.ISteamMatchmaking_GetLobbyGameServer(steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer);
		}

		public static bool SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers) {
			return NativeMethods.ISteamMatchmaking_SetLobbyMemberLimit(steamIDLobby, cMaxMembers);
		}

		public static int GetLobbyMemberLimit(ulong steamIDLobby) {
			return NativeMethods.ISteamMatchmaking_GetLobbyMemberLimit(steamIDLobby);
		}

		public static bool SetLobbyType(ulong steamIDLobby, ELobbyType eLobbyType) {
			return NativeMethods.ISteamMatchmaking_SetLobbyType(steamIDLobby, eLobbyType);
		}

		public static bool SetLobbyJoinable(ulong steamIDLobby, bool bLobbyJoinable) {
			return NativeMethods.ISteamMatchmaking_SetLobbyJoinable(steamIDLobby, bLobbyJoinable);
		}

		public static ulong GetLobbyOwner(ulong steamIDLobby) {
			return NativeMethods.ISteamMatchmaking_GetLobbyOwner(steamIDLobby);
		}

		public static bool SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner) {
			return NativeMethods.ISteamMatchmaking_SetLobbyOwner(steamIDLobby, steamIDNewOwner);
		}

		public static bool SetLinkedLobby(ulong steamIDLobby, ulong steamIDLobbyDependent) {
			return NativeMethods.ISteamMatchmaking_SetLinkedLobby(steamIDLobby, steamIDLobbyDependent);
		}
#if _PS3
		public static void CheckForPSNGameBootInvite(uint iGameBootAttributes) {
			NativeMethods.ISteamMatchmaking_CheckForPSNGameBootInvite(iGameBootAttributes);
		}
#endif
	}
	public static class SteamMatchmakingServers {
		public static HServerListRequest RequestInternetServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse) {
			return NativeMethods.ISteamMatchmakingServers_RequestInternetServerList(iApp, ppchFilters, nFilters, pRequestServersResponse);
		}

		public static HServerListRequest RequestLANServerList(AppId_t iApp, IntPtr pRequestServersResponse) {
			return NativeMethods.ISteamMatchmakingServers_RequestLANServerList(iApp, pRequestServersResponse);
		}

		public static HServerListRequest RequestFriendsServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse) {
			return NativeMethods.ISteamMatchmakingServers_RequestFriendsServerList(iApp, ppchFilters, nFilters, pRequestServersResponse);
		}

		public static HServerListRequest RequestFavoritesServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse) {
			return NativeMethods.ISteamMatchmakingServers_RequestFavoritesServerList(iApp, ppchFilters, nFilters, pRequestServersResponse);
		}

		public static HServerListRequest RequestHistoryServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse) {
			return NativeMethods.ISteamMatchmakingServers_RequestHistoryServerList(iApp, ppchFilters, nFilters, pRequestServersResponse);
		}

		public static HServerListRequest RequestSpectatorServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse) {
			return NativeMethods.ISteamMatchmakingServers_RequestSpectatorServerList(iApp, ppchFilters, nFilters, pRequestServersResponse);
		}

		public static void ReleaseRequest(HServerListRequest hServerListRequest) {
			NativeMethods.ISteamMatchmakingServers_ReleaseRequest(hServerListRequest);
		}

		public static IntPtr GetServerDetails(HServerListRequest hRequest, int iServer) {
			return NativeMethods.ISteamMatchmakingServers_GetServerDetails(hRequest, iServer);
		}

		public static void CancelQuery(HServerListRequest hRequest) {
			NativeMethods.ISteamMatchmakingServers_CancelQuery(hRequest);
		}

		public static void RefreshQuery(HServerListRequest hRequest) {
			NativeMethods.ISteamMatchmakingServers_RefreshQuery(hRequest);
		}

		public static bool IsRefreshing(HServerListRequest hRequest) {
			return NativeMethods.ISteamMatchmakingServers_IsRefreshing(hRequest);
		}

		public static int GetServerCount(HServerListRequest hRequest) {
			return NativeMethods.ISteamMatchmakingServers_GetServerCount(hRequest);
		}

		public static void RefreshServer(HServerListRequest hRequest, int iServer) {
			NativeMethods.ISteamMatchmakingServers_RefreshServer(hRequest, iServer);
		}

		public static HServerQuery PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse) {
			return NativeMethods.ISteamMatchmakingServers_PingServer(unIP, usPort, pRequestServersResponse);
		}

		public static HServerQuery PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse) {
			return NativeMethods.ISteamMatchmakingServers_PlayerDetails(unIP, usPort, pRequestServersResponse);
		}

		public static HServerQuery ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse) {
			return NativeMethods.ISteamMatchmakingServers_ServerRules(unIP, usPort, pRequestServersResponse);
		}

		public static void CancelServerQuery(HServerQuery hServerQuery) {
			NativeMethods.ISteamMatchmakingServers_CancelServerQuery(hServerQuery);
		}
	}
}