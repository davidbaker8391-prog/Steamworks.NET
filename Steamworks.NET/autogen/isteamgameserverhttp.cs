// This file is automatically generated!

using System;
using System.Runtime.InteropServices;

namespace Steamworks {
	public static class SteamGameServerHTTP {
		public static uint CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL) {
			return NativeMethods.ISteamGameServerHTTP_CreateHTTPRequest(eHTTPRequestMethod, new InteropHelp.UTF8String(pchAbsoluteURL));
		}

		public static bool SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue) {
			return NativeMethods.ISteamGameServerHTTP_SetHTTPRequestContextValue(hRequest, ulContextValue);
		}

		public static bool SetHTTPRequestNetworkActivityTimeout(uint hRequest, uint unTimeoutSeconds) {
			return NativeMethods.ISteamGameServerHTTP_SetHTTPRequestNetworkActivityTimeout(hRequest, unTimeoutSeconds);
		}

		public static bool SetHTTPRequestHeaderValue(uint hRequest, string pchHeaderName, string pchHeaderValue) {
			return NativeMethods.ISteamGameServerHTTP_SetHTTPRequestHeaderValue(hRequest, new InteropHelp.UTF8String(pchHeaderName), new InteropHelp.UTF8String(pchHeaderValue));
		}

		public static bool SetHTTPRequestGetOrPostParameter(uint hRequest, string pchParamName, string pchParamValue) {
			return NativeMethods.ISteamGameServerHTTP_SetHTTPRequestGetOrPostParameter(hRequest, new InteropHelp.UTF8String(pchParamName), new InteropHelp.UTF8String(pchParamValue));
		}

		public static bool SendHTTPRequest(uint hRequest, ref ulong pCallHandle) {
			return NativeMethods.ISteamGameServerHTTP_SendHTTPRequest(hRequest, ref pCallHandle);
		}

		public static bool SendHTTPRequestAndStreamResponse(uint hRequest, ref ulong pCallHandle) {
			return NativeMethods.ISteamGameServerHTTP_SendHTTPRequestAndStreamResponse(hRequest, ref pCallHandle);
		}

		public static bool DeferHTTPRequest(uint hRequest) {
			return NativeMethods.ISteamGameServerHTTP_DeferHTTPRequest(hRequest);
		}

		public static bool PrioritizeHTTPRequest(uint hRequest) {
			return NativeMethods.ISteamGameServerHTTP_PrioritizeHTTPRequest(hRequest);
		}

		public static bool GetHTTPResponseHeaderSize(uint hRequest, string pchHeaderName, out uint unResponseHeaderSize) {
			return NativeMethods.ISteamGameServerHTTP_GetHTTPResponseHeaderSize(hRequest, new InteropHelp.UTF8String(pchHeaderName), out unResponseHeaderSize);
		}

		public static bool GetHTTPResponseHeaderValue(uint hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize) {
			return NativeMethods.ISteamGameServerHTTP_GetHTTPResponseHeaderValue(hRequest, new InteropHelp.UTF8String(pchHeaderName), pHeaderValueBuffer, unBufferSize);
		}

		public static bool GetHTTPResponseBodySize(uint hRequest, out uint unBodySize) {
			return NativeMethods.ISteamGameServerHTTP_GetHTTPResponseBodySize(hRequest, out unBodySize);
		}

		public static bool GetHTTPResponseBodyData(uint hRequest, byte[] pBodyDataBuffer, uint unBufferSize) {
			return NativeMethods.ISteamGameServerHTTP_GetHTTPResponseBodyData(hRequest, pBodyDataBuffer, unBufferSize);
		}

		public static bool GetHTTPStreamingResponseBodyData(uint hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize) {
			return NativeMethods.ISteamGameServerHTTP_GetHTTPStreamingResponseBodyData(hRequest, cOffset, pBodyDataBuffer, unBufferSize);
		}

		public static bool ReleaseHTTPRequest(uint hRequest) {
			return NativeMethods.ISteamGameServerHTTP_ReleaseHTTPRequest(hRequest);
		}

		public static bool GetHTTPDownloadProgressPct(uint hRequest, out float pflPercentOut) {
			return NativeMethods.ISteamGameServerHTTP_GetHTTPDownloadProgressPct(hRequest, out pflPercentOut);
		}

		public static bool SetHTTPRequestRawPostBody(uint hRequest, string pchContentType, byte[] pubBody, uint unBodyLen) {
			return NativeMethods.ISteamGameServerHTTP_SetHTTPRequestRawPostBody(hRequest, new InteropHelp.UTF8String(pchContentType), pubBody, unBodyLen);
		}
	}
}